#include <iostream>
#include <fstream>
using namespace std;
class hw3 {
public:
	// constructor
	hw3() { N1 = 5; N2 = 10; a = 2; b = 3; x0 = -5; dx = 0.1; m = 10; }
	//member data
	int N1, N2, m;
	float a, b, x0, dx;
	// member function
	int func1(int* e) {
		e = new int[N2 - N1 + 1];
		int d = 0, i, j;
		for (i = N1, j = 0; i <= N2; i++, j++) {
			d += i;
			e[j] = d;
		}
		return d;
	}
	float func2(float* f) {
		f = new float[m];
		float x;
		int i;
		for (x = x0, i = 0; i < m; x += dx, i++) {
			f[i] = a * x + b;
		}
		return 0;
	}
};
void main() {
	hw3 akali, amumu, annie, ashe;
	int ii1[100], ii2[100], ii3[100], ii4[100], j1, j2, j3, j4;
	float ff1[100], ff2[100], ff3[100], ff4[100], k1, k2, k3, k4;
	akali.N1 = 5; akali.N2 = 10; akali.a = 2, akali.b = 3; akali.x0 = -5; akali.dx = 0.1; akali.m = 10;
	amumu.N1 = 7; amumu.N2 = 100; amumu.a = -3.5, amumu.b = 4; amumu.x0 = 100; amumu.dx = 10; amumu.m = 15;
	annie.N1 = 12; annie.N2 = 17; annie.a = 0.01; annie.b = 0.2; annie.x0 = 1.5; annie.dx = 0.08; annie.m = 20;
	ashe.N1 = 10; ashe.N2 = 20; ashe.a = 4.2; ashe.b = -5.3; ashe.x0 = 2.1; ashe.dx = 0.2; ashe.m = 5;
	j1 = akali.func1(ii1);
	j2 = amumu.func1(ii2);
	j3 = annie.func1(ii3);
	j4 = ashe.func1(ii4);
	k1 = akali.func2(ff1);
	k2 = amumu.func2(ff2);
	k3 = annie.func2(ff3);
	k4 = ashe.func2(ff4);
	ofstream ak("akali", ios::binary | ios::out);
	ak << akali.N1 << akali.N2 << "\n" << akali.a << akali.b << akali.x0 << akali.dx << "\n" << akali.m;
	ak.write((char*)ii1, sizeof(ii1));
	ak.write((char*)ff1, sizeof(ff1));
	ak.close();

	ofstream am("amumu", ios::binary | ios::out);
	am << amumu.N1 << amumu.N2 << "\n" << amumu.a << amumu.b << amumu.x0 << amumu.dx << "\n" << amumu.m;
	am.write((char*)ii2, sizeof(ii2));
	am.write((char*)ff2, sizeof(ff2));
	am.close();

	ofstream an("annie", ios::binary | ios::out);
	an << annie.N1 << annie.N2 << "\n" << annie.a << annie.b << annie.x0 << annie.dx << "\n" << annie.m;
	an.write((char*)ii3, sizeof(ii3));
	an.write((char*)ff3, sizeof(ff3));
	an.close();

	ofstream as("ashe", ios::binary | ios::out);
	as << ashe.N1 << ashe.N2 << "\n" << ashe.a << ashe.b << ashe.x0 << ashe.dx << "\n" << ashe.m;
	as.write((char*)ii4, sizeof(ii4));
	as.write((char*)ff4, sizeof(ff4));
	as.close();
}
